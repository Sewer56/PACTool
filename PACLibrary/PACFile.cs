using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using PACLibrary.Structs.PAC;
using PACLibrary.Utilities;

namespace PACLibrary
{
    /// <summary>
    /// Managed version of the <see cref="PACLibrary.Structs.PAC.File"/> struct.
    /// </summary>
    public class PACFile
    {
        public File     File;
        public PACSound Sound;

        /// <summary>
        /// Returns the autogenerated filename for this file.
        /// </summary>
        public string GetFileNameWithExtension()
        {
            return $"Sound.{File.BankIndex}.{File.FileIndex}.wav";
        }

        /// <summary>
        /// Returns the autogenerated filename for this file.
        /// </summary>
        public string GetFileName()
        {
            return $"Sound.{File.BankIndex}.{File.FileIndex}";
        }

        private PACFile() { }

        /// <summary>
        /// Creates a PACFile from a physical WAV file.
        /// </summary>
        /// <param name="filePath"></param>
        public PACFile(string filePath)
        {
            ReplaceFromFile(filePath);
        }

        /// <summary>
        /// Creates a PACFile from an array containing the whole PAC archive the file is contained in
        /// and the File structure from said array.
        /// </summary>
        public PACFile(byte[] pacArchive, File file)
        {
            this.File   = file;
            Sound       = PACSound.FromByteArray(file.GetSoundBytes(pacArchive));
        }

        /// <summary>
        /// Saves the individual file to the hard drive as a WAV file.
        /// </summary>
        public unsafe void SaveFile(string folderPath)
        {
            // Create a WAV Sound.
            var wavSound        = WAVSound.FromPACSound(Sound);
            List<byte> bytes    = new List<byte>(Sound.SoundHeader.DataSize + sizeof(File) + sizeof(Sound));

            bytes.AddRange(StructUtilities.ConvertStructureToByteArray(ref wavSound.SoundHeader));
            bytes.AddRange(wavSound.SoundData.ToArray());

            System.IO.File.WriteAllBytes($"{folderPath}\\{GetFileNameWithExtension()}", bytes.ToArray());
        }

        /// <summary>
        /// Replaces the current PAC Sound with a new WAVE file.
        /// </summary>
        public unsafe void ReplaceFromFile(string wavPath)
        {
            var wavSound = WAVSound.FromFile(wavPath);
            Sound        = PACSound.FromWAVSound(wavSound);
        }
    }
}
